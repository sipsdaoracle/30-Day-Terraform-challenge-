**Participant Details Name: Rajiya Shaik

Task Completed:

Reading: Chapter 2 of "Terraform: Up & Running" by Yevgeniy Brikman.Pages:till 80

Udemy Videos: "Terraform data block " (Video 19) "Terraform configuration block" (Video 20) "Terraform module block" (Video 21) "Terraform output block " (Video 22)

main.tf
```
terraform {
    required_providers {
      aws = {
        source = "hashicorp/aws"
        version = "~> 4.16"
      }
    }
    required_version = " 1.9.5"
}
provider "aws" {
    region = "us-east-1"
}

data "aws_vpc" "default" {
  default = true
}
data "aws_subnets" "default" {
  filter {
   name = "vpc-id"
   values = [data.aws_vpc.default.id]
 }
}
   
resource "aws_launch_configuration" "example" {
    image_id = "ami-0e86e20dae9224db8"
    instance_type = "t2.micro"
    security_groups =  [ aws_security_group.sg1.id ]
    

    user_data = <<-EOF
                #!bin/bash
                echo "Hello world/ This is Razia on 30 day-Terraform-challenge" > index.html
                nohup busybox httpd -f -p ${var.server_port} &
                EOF

#Required when using a launch configuration with an auto scaling group.
   lifecycle {
    create_before_destroy = true
   }

}
resource "aws_autoscaling_group" "example" {
  launch_configuration = aws_launch_configuration.example.name
  availability_zones = [ "us-east-1a","us-east-1b" ]
  target_group_arns = [aws_lb_target_group.asg.arn]


  min_size = 2
  max_size = 10
  tag{
    key= "Name"
    value = "terraform-asg-example"
    propagate_at_launch = true

  }
}
resource "aws_security_group" "sg1" {
    name = "terraform-my_server-instance"
    ingress {
        from_port = var.server_port
        to_port = var.server_port
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
}

variable "server_port" {
    description = "The port the server will use for HTTP requests"
    type= number
    default = 8080
  
}

resource "aws_lb" "example" {
  name = "terraform-asg-example"
  load_balancer_type = "application"
  security_groups = [aws_security_group.alb.id] 
  subnets = data.aws_subnets.default.ids
}

resource "aws_lb_listener" "http" {
   load_balancer_arn = aws_lb.example.arn
   port = 80
   protocol = "HTTP"
# By default, return a simple 404 page
  default_action {
     type = "fixed-response"
     fixed_response {
     content_type = "text/plain"
     message_body = "404: page not found"
     status_code = 404
  }
 }
}

resource "aws_security_group" "alb" {
  name = "terraform-example-alb"
# Allow inbound HTTP requests
ingress {
   from_port = 80
   to_port = 80
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
}
# Allow all outbound requests
egress {
   from_port = 0
   to_port = 0
   protocol = "-1"
   cidr_blocks = ["0.0.0.0/0"]
}
}

resource "aws_lb_target_group" "asg" {
    name = "terraform-asg-example"
    port = var.server_port
    protocol = "HTTP"
    
health_check {
   path = "/"
   protocol = "HTTP"
   matcher = "200"
   interval = 15
   timeout = 3
   healthy_threshold = 2
   unhealthy_threshold = 2
}
}

resource "aws_lb_listener_rule" "asg" {
    listener_arn = aws_lb_listener.http.arn
    priority = 100
condition {
  path_pattern {
    values = ["*"]
}
}
action {
   type = "forward"
   target_group_arn = aws_lb_target_group.asg.arn
}
}

output "alb_dns_name" {
  value = aws_lb.example.dns_name
  description = "The domain name of the load balancer"
}

```
```